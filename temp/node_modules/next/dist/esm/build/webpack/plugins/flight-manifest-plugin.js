/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ import path from "path";
import { webpack, sources } from "next/dist/compiled/webpack/webpack";
import { CLIENT_REFERENCE_MANIFEST, SYSTEM_ENTRYPOINTS } from "../../../shared/lib/constants";
import { relative } from "path";
import { isClientComponentEntryModule, isCSSMod } from "../loaders/utils";
import { getProxiedPluginState } from "../../build-context";
import { traverseModules } from "../utils";
import { nonNullable } from "../../../lib/non-nullable";
import { WEBPACK_LAYERS } from "../../../lib/constants";
import { getClientReferenceModuleKey } from "../../../lib/client-reference";
const pluginState = getProxiedPluginState({
    serverModuleIds: {},
    edgeServerModuleIds: {},
    ASYNC_CLIENT_MODULES: []
});
const PLUGIN_NAME = "ClientReferenceManifestPlugin";
export class ClientReferenceManifestPlugin {
    constructor(options){
        this.dev = false;
        this.dev = options.dev;
        this.appDir = options.appDir;
        this.ASYNC_CLIENT_MODULES = new Set(pluginState.ASYNC_CLIENT_MODULES);
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory  })=>{
            compilation.dependencyFactories.set(webpack.dependencies.ModuleDependency, normalModuleFactory);
            compilation.dependencyTemplates.set(webpack.dependencies.ModuleDependency, new webpack.dependencies.NullDependency.Template());
        });
        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{
            compilation.hooks.processAssets.tap({
                name: PLUGIN_NAME,
                // Have to be in the optimize stage to run after updating the CSS
                // asset hash via extract mini css plugin.
                stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH
            }, (assets)=>this.createAsset(assets, compilation, compiler.context));
        });
    }
    createAsset(assets, compilation, context) {
        const manifest = {
            ssrModuleMapping: {},
            edgeSSRModuleMapping: {},
            clientModules: {}
        };
        const clientRequestsSet = new Set();
        // Collect client requests
        function collectClientRequest(mod) {
            var _mod_buildInfo;
            if (mod.resource === "" && ((_mod_buildInfo = mod.buildInfo) == null ? void 0 : _mod_buildInfo.rsc)) {
                const { requests =[]  } = mod.buildInfo.rsc;
                requests.forEach((r)=>{
                    clientRequestsSet.add(r);
                });
            }
        }
        traverseModules(compilation, (mod)=>collectClientRequest(mod));
        compilation.chunkGroups.forEach((chunkGroup)=>{
            function getAppPathRequiredChunks() {
                return chunkGroup.chunks.map((requiredChunk)=>{
                    if (SYSTEM_ENTRYPOINTS.has(requiredChunk.name || "")) {
                        return null;
                    }
                    // Get the actual chunk file names from the chunk file list.
                    // It's possible that the chunk is generated via `import()`, in
                    // that case the chunk file name will be '[name].[contenthash]'
                    // instead of '[name]-[chunkhash]'.
                    return [
                        ...requiredChunk.files
                    ].map((file)=>{
                        // It's possible that a chunk also emits CSS files, that will
                        // be handled separatedly.
                        if (!file.endsWith(".js")) return null;
                        if (file.endsWith(".hot-update.js")) return null;
                        return requiredChunk.id + ":" + file;
                    });
                }).flat().filter(nonNullable);
            }
            const requiredChunks = getAppPathRequiredChunks();
            const recordModule = (id, mod, chunkCSS)=>{
                var _mod_resourceResolveData, _mod_buildInfo, _mod_buildInfo_rsc;
                const isCSSModule = isCSSMod(mod);
                // Skip all modules from the pages folder. CSS modules are a special case
                // as they are generated by mini-css-extract-plugin and these modules
                // don't have layer information attached.
                if (!isCSSModule && mod.layer !== WEBPACK_LAYERS.appClient) {
                    return;
                }
                const resource = mod.type === "css/mini-extract" ? mod._identifier.slice(mod._identifier.lastIndexOf("!") + 1) : mod.resource;
                if (!resource) {
                    return;
                }
                const moduleReferences = manifest.clientModules;
                const moduleIdMapping = manifest.ssrModuleMapping;
                const edgeModuleIdMapping = manifest.edgeSSRModuleMapping;
                // Note that this isn't that reliable as webpack is still possible to assign
                // additional queries to make sure there's no conflict even using the `named`
                // module ID strategy.
                let ssrNamedModuleId = relative(context, ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path) || resource);
                if (!ssrNamedModuleId.startsWith(".")) ssrNamedModuleId = `./${ssrNamedModuleId.replace(/\\/g, "/")}`;
                if (isCSSModule) {
                    const exportName = getClientReferenceModuleKey(resource, "");
                    if (!moduleReferences[exportName]) {
                        moduleReferences[exportName] = {
                            id: id || "",
                            name: "default",
                            chunks: chunkCSS
                        };
                    } else {
                        // It is possible that there are multiple modules with the same resource,
                        // e.g. extracted by mini-css-extract-plugin. In that case we need to
                        // merge the chunks.
                        moduleReferences[exportName].chunks = [
                            ...new Set([
                                ...moduleReferences[exportName].chunks,
                                ...chunkCSS
                            ])
                        ];
                    }
                    return;
                }
                // Only apply following logic to client module requests from client entry,
                // or if the module is marked as client module.
                if (!clientRequestsSet.has(resource) && !isClientComponentEntryModule(mod)) {
                    return;
                }
                const exportsInfo = compilation.moduleGraph.getExportsInfo(mod);
                const isAsyncModule = this.ASYNC_CLIENT_MODULES.has(mod.resource);
                const cjsExports = [
                    ...new Set([
                        ...mod.dependencies.map((dep)=>{
                            // Match CommonJsSelfReferenceDependency
                            if (dep.type === "cjs self exports reference") {
                                // @ts-expect-error: TODO: Fix Dependency type
                                if (dep.base === "module.exports") {
                                    return "default";
                                }
                                // `exports.foo = ...`, `exports.default = ...`
                                // @ts-expect-error: TODO: Fix Dependency type
                                if (dep.base === "exports") {
                                    // @ts-expect-error: TODO: Fix Dependency type
                                    return dep.names.filter((name)=>name !== "__esModule");
                                }
                            }
                            return null;
                        }),
                        ...((_mod_buildInfo = mod.buildInfo) == null ? void 0 : (_mod_buildInfo_rsc = _mod_buildInfo.rsc) == null ? void 0 : _mod_buildInfo_rsc.clientRefs) || []
                    ].filter(Boolean).flat())
                ];
                // The client compiler will always use the CJS Next.js build, so here we
                // also add the mapping for the ESM build (Edge runtime) to consume.
                const esmResource = /[\\/]next[\\/]dist[\\/]/.test(resource) ? resource.replace(/[\\/]next[\\/]dist[\\/]/, "/next/dist/esm/".replace(/\//g, path.sep)) : null;
                function addClientReference(name) {
                    const exportName = getClientReferenceModuleKey(resource, name);
                    manifest.clientModules[exportName] = {
                        id,
                        name,
                        chunks: requiredChunks,
                        async: isAsyncModule
                    };
                    if (esmResource) {
                        const edgeExportName = getClientReferenceModuleKey(esmResource, name);
                        manifest.clientModules[edgeExportName] = manifest.clientModules[exportName];
                    }
                }
                function addSSRIdMapping(name) {
                    const exportName = getClientReferenceModuleKey(resource, name);
                    if (typeof pluginState.serverModuleIds[ssrNamedModuleId] !== "undefined") {
                        moduleIdMapping[id] = moduleIdMapping[id] || {};
                        moduleIdMapping[id][name] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: pluginState.serverModuleIds[ssrNamedModuleId]
                        };
                    }
                    if (typeof pluginState.edgeServerModuleIds[ssrNamedModuleId] !== "undefined") {
                        edgeModuleIdMapping[id] = edgeModuleIdMapping[id] || {};
                        edgeModuleIdMapping[id][name] = {
                            ...manifest.clientModules[exportName],
                            // During SSR, we don't have external chunks to load on the server
                            // side with our architecture of Webpack / Turbopack. We can keep
                            // this field empty to save some bytes.
                            chunks: [],
                            id: pluginState.edgeServerModuleIds[ssrNamedModuleId]
                        };
                    }
                }
                addClientReference("*");
                addClientReference("");
                addSSRIdMapping("*");
                addSSRIdMapping("");
                const moduleExportedKeys = [
                    ...[
                        ...exportsInfo.exports
                    ].filter((exportInfo)=>exportInfo.provided).map((exportInfo)=>exportInfo.name),
                    ...cjsExports
                ].filter((name)=>name !== null);
                moduleExportedKeys.forEach((name)=>{
                    const key = getClientReferenceModuleKey(resource, name);
                    // If the chunk is from `app/` chunkGroup, use it first.
                    // This make sure not to load the overlapped chunk from `pages/` chunkGroup
                    if (!manifest.clientModules[key] || chunkGroup.name && /^app[\\/]/.test(chunkGroup.name)) {
                        addClientReference(name);
                    }
                    addSSRIdMapping(name);
                });
                manifest.clientModules = moduleReferences;
                manifest.ssrModuleMapping = moduleIdMapping;
                manifest.edgeSSRModuleMapping = edgeModuleIdMapping;
            };
            chunkGroup.chunks.forEach((chunk)=>{
                const chunkModules = compilation.chunkGraph.getChunkModulesIterable(chunk);
                const chunkCSS = [
                    ...chunk.files
                ].filter((f)=>!f.startsWith("static/css/pages/") && f.endsWith(".css"));
                for (const mod of chunkModules){
                    const modId = compilation.chunkGraph.getModuleId(mod) + "";
                    recordModule(modId, mod, chunkCSS);
                    // If this is a concatenation, register each child to the parent ID.
                    // TODO: remove any
                    const anyModule = mod;
                    if (anyModule.modules) {
                        anyModule.modules.forEach((concatenatedMod)=>{
                            recordModule(modId, concatenatedMod, chunkCSS);
                        });
                    }
                }
            });
        });
        const file = "server/" + CLIENT_REFERENCE_MANIFEST;
        const json = JSON.stringify(manifest, null, this.dev ? 2 : undefined);
        pluginState.ASYNC_CLIENT_MODULES = [];
        assets[file + ".js"] = new sources.RawSource(`self.__RSC_MANIFEST=${JSON.stringify(json)}`);
        assets[file + ".json"] = new sources.RawSource(json);
    }
}

//# sourceMappingURL=flight-manifest-plugin.js.map